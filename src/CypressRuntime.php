<?php

namespace Drupal\cypress;


use Symfony\Component\Filesystem\Filesystem;

/**
 * Manages the Cypress runtime directory.
 *
 * Responsible for directory creation, config file updates and collection of
 * test requirements across different test suites.
 *
 * @package Drupal\cypress
 */
class CypressRuntime implements CypressRuntimeInterface {

  /**
   * A filesystem component for various operations.
   *
   * @var \Symfony\Component\Filesystem\Filesystem
   */
  protected $fileSystem;

  /**
   * The root directory where config files and tests should be collected.
   * @var string
   */
  protected $cypressRoot;

  /**
   * List of paths to support files.
   *
   * @var string[]
   */
  protected $support = [];

  /**
   * Generate the filesystem instance.
   *
   * @return \Symfony\Component\Filesystem\Filesystem
   */
  protected function getFileSystem() {
    return new Filesystem();
  }

  /**
   * CypressRuntime constructor.
   *
   * @param string $cypressRoot
   *   The absolute path the Cypress runtime should reside in.
   */
  public function __construct($cypressRoot) {
    $this->cypressRoot = $cypressRoot;
    $this->fileSystem = $this->getFileSystem();
  }

  /**
   * @param string $directory
   */
  protected function removeDirectory($directory) {
  }
  /**
   * {@inheritDoc}
   */
  public function initiate(CypressOptions $options) {
    if (!$this->fileSystem->exists($this->cypressRoot)) {
      $this->fileSystem->mkdir($this->cypressRoot);
    }

    if ($this->fileSystem->exists($this->cypressRoot . '/integration')) {
      $this->fileSystem->remove($this->cypressRoot . '/integration');
    }

    if ($this->fileSystem->exists($this->cypressRoot . '/fixtures')) {
      $this->fileSystem->remove($this->cypressRoot . '/fixtures');
    }

    $this->fileSystem->mkdir($this->cypressRoot . '/integration');
    $this->fileSystem->mkdir($this->cypressRoot . '/integration/common');
    $this->fileSystem->mkdir($this->cypressRoot . '/fixtures');

    $this->fileSystem->dumpFile($this->cypressRoot . '/cypress.json', $options->getCypressJson());
    $this->fileSystem->dumpFile($this->cypressRoot . '/plugins.js', $this->generatePluginsJs());
    $this->fileSystem->dumpFile($this->cypressRoot . '/support.js', $this->generateSupportJs());
  }

  /**
   * {@inheritDoc}
   */
  public function addSuite($name, $path) {
    if (!$this->fileSystem->exists($path)) {
      return FALSE;
    }

    if ($this->fileSystem->exists($path . '/integration')) {
      $this->fileSystem->symlink(
        $path . '/integration',
        $this->cypressRoot . '/integration/' . $name
      );
    }

    if ($this->fileSystem->exists($path . '/steps')) {
      $this->fileSystem->symlink(
        $path . '/steps',
        $this->cypressRoot . '/integration/common/' . $name
      );
    }

    if ($this->fileSystem->exists($path . '/fixtures')) {
      $this->fileSystem->symlink(
        $path . '/fixtures',
        $this->cypressRoot . '/fixtures/' . $name
      );
    }
    if ($this->fileSystem->exists($path . '/support/index.js')) {
      $this->support[] = $path;
      $this->fileSystem->dumpFile($this->cypressRoot . '/support.js', $this->generateSupportJs());
    }
  }

  /**
   * Generate a javascript file that imports plugins.
   *
   * @return string
   *   The content for a local plugins/index.js.
   */
  private function generatePluginsJs() {
    $plugins =  <<<JS
const cucumber = require('cypress-cucumber-preprocessor').default;

module.exports = (on, config) => {
  on('file:preprocessor', cucumber());
};
JS;
    return $plugins;
  }

  /**
   * Generate a javascript file that imports `index` from given folders.
   *
   * @return string
   *   The content for a local index.js.
   */
  protected function generateSupportJs() {
    $index = array_map(function ($path) {
      return "require('$path/support/index.js');";
    }, $this->support);
    array_unshift(
      $index,
      '// Automatically generated by the Cypress module for Drupal.'
    );
    return implode("\n", $index);
  }
}
